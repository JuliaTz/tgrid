@{
    ViewBag.Title = "TGrid Demo";
}
<link rel="stylesheet" type="text/css" href="~/Styles/Grid.css">

<script src="~/Scripts/angular.js"></script>
<script src="~/Scripts/jquery-2.0.3.js"></script>
<script src="~/Scripts/knockout-2.3.0.js"></script>


<script src="~/Scripts/BaseHtmlProvider.js" type="text/javascript"></script>
<script src="~/Scripts/KnockoutHtmlProvider.js" type="text/javascript"></script>
<script src="~/Scripts/AngularHtmlProvider.js" type="text/javascript"></script>
<script src="~/Scripts/options.js" type="text/javascript"></script>
<script src="~/Scripts/TGrid.js" type="text/javascript"></script> 
<script src="~/Scripts/TGridBinding.js" type="text/javascript"></script>
<script src="~/Scripts/Controller.js" type="text/javascript"></script>


<h1>TGrid Demo</h1>

<h2>Pure JavaScript</h2>

<div id="test-pure-js">
    <script type="text/html">
        <column data-g-width="150" data-g-views="mobile,desktop">
            <header>
                <span>Name</span>
            </header>
            <cell>
                <span style="color: red;" >test</span>
            </cell>
        </column>

        <column data-g-width="100" data-g-views="mobile,desktop">
            <header>Key</header>
            <cell/>
        </column>
      
         <mobile>
            <div>
            </div>
        </mobile>

        <details>
        </details>
    </script>
</div>

<script>
    $(function () {
        //var target = $("#test-pure-js");
        //var options = new TesserisPro.TGrid.Options(target,TesserisPro.TGrid.Framework.Knockout);
        //var grid = new TesserisPro.TGrid.Grid(target, options);
    });
</script>

<h2>Knockout</h2>

<div id="test-knockout" data-bind="tgrid: items" rowOnPage="2">
    <script type="text/html">
        <column data-g-width="150" data-g-views="mobile,desktop">
            <header>
                <span style="color: red;" data-bind="text: nameColumnTitle"></span>
            </header>
            <cell>
                <span style="color: red;" data-bind="text: name"></span>
            </cell>
        </column>
        <column data-g-width="100" data-g-views="mobile,desktop">
            <header>Key</header>
            <cell data-bind="text: key" />
        </column>
      
         <mobile>
            <div>
            </div>
        </mobile>

        <details>
        </details>
    </script>
</div>

<script type="text/javascript">
    function vm() {
        var self = this;
        self.nameColumnTitle = "Name";
        self.items = ko.observableArray([
            { name: "a1", key: "a4" },
            { name: "b1", key: "c3" },
            { name: "c1", key: "b3" },
            { name: "a2", key: "a3" },
            { name: "b2", key: "c2" },
            { name: "c2", key: "b2" },
            { name: "a3", key: "a2" },
            { name: "b3", key: "c1" },
            { name: "c3", key: "b1" },
            { name: "a4", key: "a1" }
        ]);

        self.sort = ko.observable({ column: "name", order: -1 });

        self.sortedData = ko.computed(function (a, b) {
            return self.items.sort(
                function (a, b) {
                    return a[self.sort().column] == b[self.sort().column] ? 0 :
                    (a[self.sort().column] < b[self.sort().column] ? -1 * self.sort().order : self.sort().order)
                })
        });

        self.currentPage = ko.observable(1);
        
        self.TotalItemCount = ko.observable(self.items().length);
    };

    $(function () { ko.applyBindings(new vm()); });
</script>

<h2>Angular</h2>

<div id="test-angular" data-bind="agrid: items" rowOnPage="2">
    <script type="text/html">
        <column data-g-width="150" data-g-views="mobile,desktop">
            <header>
                <span style="color: red;" data-bind="text: nameColumnTitle"></span>
            </header>
            <cell>
                <span style="color: red;" data-bind="text: name"></span>
            </cell>
        </column>
        <column data-g-width="100" data-g-views="mobile,desktop">
            <header>Key</header>
            <cell data-bind="text: key" />
        </column>
      
         <mobile>
            <div>
            </div>
        </mobile>

        <details>
        </details>
    </script>
</div>

<script type="text/javascript">
    angular.module('App', [])
    .controller('Ctrl', function agrid($scope) {
        $scope.nameColumnTitle = "name"
        $scope.items = [
            { "name": "a1", "key": "c2" },
            { "name": "b1", "key": "b2" },
            { "name": "c3", "key": "d2" },
            { "name": "d1", "key": "c2" },
            { "name": "e1", "key": "b2" },
            { "name": "f3", "key": "d2" },
            { "name": "g1", "key": "c2" },
            { "name": "j1", "key": "b2" },
            { "name": "k3", "key": "d2" },
            { "name": "l1", "key": "c2" },
            { "name": "m1", "key": "b2" },
            { "name": "n3", "key": "d2" },
            { "name": "o4", "key": "a2" }
        ];
        $scope.sortColumn = "name";
        $scope.sortOrder = false;
        $scope.totalItemCount = $scope.items.length;
        $scope.pageSize = 3;
        $scope.pageSlide = 1;
        $scope.currentPage = 1;
        $scope.firstItemIndex = function () {
            return ($scope.currentPage * $scope.pageSize) + 1;
        }
        $scope.lastItemIndex = function () {
            return Math.min(($scope.currentPage + 1) * $scope.pageSize, $scope.totalItemCount);
        }
        $scope.maxPage = function () {
            return Math.ceil($scope.totalItemCount / $scope.pageSize - 1);
        }
        $scope.nextPage = function () {
            if ($scope.currentPage != $scope.maxPage()) $scope.currentPage++
        }
        $scope.previousPage = function () {
            if ($scope.currentPage != 0) $scope.currentPage--;
        }
    })
    .filter('startFrom', function () {
        return function (input, start) {
            start = +start; //parse to int
            return input.slice(start);
        }
    });
    
    $(function () {
        var id = $(document.getElementById('test-angular'));
        var opt = new TesserisPro.TGrid.Options(id, TesserisPro.TGrid.Framework.Angular);
        var grid = TesserisPro.TGrid.Grid(id, opt)

        angular.bootstrap(id, ['App'])
    })
</script>

<h2>Angular sample of result</h2>

<div>
    <div ng-app>
        <table ng-controller="ctrl" border="1">
            <thead>
                <tr>
                    <th ng-repeat="item in header"> {{item}}</th>
                </tr>
            </thead>
            <tbody>
                <tr ng-repeat="item in items">
                  <td>  
                      {{item.Name}}
                  </td>
                  <td>  
                      {{item.Key}}
                  </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

<script type="text/javascript">
    'use strict';
    function ctrl($scope) {
        $scope.header = ["name" ,"key" ]
        $scope.items = [
                { "Name": "First ", "Key": "Last" },
                { "Name": "Second", "Key": "Last 1" }];
    }
</script>
