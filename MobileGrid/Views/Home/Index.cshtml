@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/knockout")
@Scripts.Render("~/bundles/utils")
@Scripts.Render("~/Content/css")

<script type="text/javascript">
    ko.bindingHandlers.DPHeader = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var columns = valueAccessor().columns;
            
            var headerMarkup = "";
            for (var index = 0; index < columns.length; index++) {
                var column = columns[index];
                var widthStyle = isNotNoU(column.width) ? "min-width: " + column.width + "; max-width: " + column.width + "; width: " + column.width : "";

                // TODO: rework sort order so it changes to opposite only if column changed, otherwise make it equal 1.

                headerMarkup += "<span data-bind=\"click: function () { $root.gridConfig.sortOrder({ propertyName : '" + column.property + "', order: -$root.gridConfig.sortOrder().order}); }\" style=\"" + widthStyle + "\" class=\"dp-inner-header\">" + column.header;

                // TODO: add arrow icons, leave css arrows.
                headerMarkup += "<span class=\"arrow-down\" data-bind=\"visible: $root.gridConfig.sortOrder().order == '-1' && $root.gridConfig.sortOrder().propertyName == '" + column.property + "'\"></span>";
                headerMarkup += "<span class=\"arrow-up\" data-bind=\"visible: $root.gridConfig.sortOrder().order == '1' && $root.gridConfig.sortOrder().propertyName == '" + column.property + "'\"></span>";

                headerMarkup +="</span>";

            }

            $(element).html(headerMarkup);
        },
        update: function (element, valueAccessor) {
        }
    };

    ko.bindingHandlers.DPContent = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var columns = valueAccessor().columns;
            var data = valueAccessor().data;
            var mobileHeader = valueAccessor().mobileHeader;
            var rowMarkup = "";
            for (var index = 0; index < columns.length; index++) {
                var column = columns[index];
                var value = data[column.property];

                var widthStyle = isNotNoU(column.width) ? "min-width: " + column.width + "; max-width: " + column.width + "; width: " + column.width : "";
                var mobileWidth = isNotNoU(mobileHeader.width) ? "min-width: " + mobileHeader.width + "; max-width: " + mobileHeader.width + "; width: " + mobileHeader.width : "";
                rowMarkup += "<div style=\"" + widthStyle + "\" class=\"dp-grid-cell\">";
                rowMarkup += "<span style=\"" + mobileWidth + "\" class=\"dp-grid-mobile-heading\">" + column.header + "</span>";
                rowMarkup += "<span class=\"dp-grid-cell-content\">" + value + "</span>";
                rowMarkup += "</div>";
            }

            $(element).html(rowMarkup);
        },
        update: function (element, valueAccessor) {
        }
    };
</script>

<div class="dp-grid-wrapper"> 
    <div class="dp-grid-heading">
        <div class="dp-grid-column-header" data-bind="DPHeader: gridConfig">
        </div>
    </div>
    <div class="dp-grid-content" data-bind="foreach: gridConfig.sortedData">
        <div class="dp-grid-row" data-bind="DPContent: { columns: $parent.gridConfig.columns, data: $data, mobileHeader: $parent.gridConfig.mobileHeader }">
        </div>
    </div>
</div>

<script type="text/javascript">

    var GridConfigViewModel = function (gridConfig) {
        var $ref = {};

        $ref.data = ko.observableArray(gridConfig.data);
        $ref.columns = gridConfig.columns;
        $ref.mobileHeader = gridConfig.mobileHeader;

        $ref.displayLimiter = ko.observable(gridConfig.display);

        $ref.sortOrder = ko.observable({ propertyName: $ref.columns[0].property, order: 1});

        $ref.lastPropertyName = $ref.sortOrder().propertyName;

        $ref.sortedData = ko.computed(function () {
            var order = $ref.sortOrder().order;
            var propertyName = $ref.sortOrder().propertyName;

            if (propertyName != $ref.lastPropertyName) {
                order = 1;
                $ref.sortOrder().order = 1;
                $ref.lastPropertyName = propertyName;
            }

            var result = $ref.data.sort(function (a, b) {
                return CompareByProperty(a, b, propertyName) * order;
            });
            
            
            // refactor this piece of code
            var semiresult = [];
            var i = 0;
            while (semiresult.length < $ref.displayLimiter()) {
                semiresult.push(result[i]);
                i++;
            }
                        
            // end

            return semiresult;
        });

        return $ref;
    }

    var GridViewModel = function () {
        this.gridConfig = new GridConfigViewModel({
            data: [{ name: "0", type: "B", severity: "Maximum"},
                    { name: "Y", type: "E", severity: "10" },
                    { name: "V", type: "H", severity: "7" },
                    { name: "S", type: "K", severity: "5" },
                    { name: "P", type: "N", severity: "R" },
                    { name: "M", type: "Q", severity: "O" },
                    { name: "J", type: "T", severity: "L" },
                    { name: "G", type: "W", severity: "I" },
                    { name: "D", type: "Z", severity: "F" },
                    { name: "A", type: "1", severity: "C" }],
            columns: [
                { header: "Item Name", property: "name", width: "200px" },
                { header: "Item Type", property: "type", width: "200px" },
                { header: "Item Severity", property: "severity"}
            ],
            mobileHeader: {
                width: "200px"
            },
            display: 5
        });
    };

    ko.applyBindings(new GridViewModel());
</script>