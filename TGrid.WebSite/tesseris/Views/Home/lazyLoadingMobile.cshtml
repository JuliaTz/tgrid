@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SimpleGridWithoutPaging</title>
    <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">

    <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
    <script src="~/Scripts/iframe/knockout-2.3.0.js"></script>

    <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-knockout-min.js" type="text/javascript"></script>
</head>
<body>
    <div>
        <div id="test-knockout" data-bind="tgrid: { provider: itemsProvider, enableVirtualScroll: 'true' }">
    <script type="text/html">

        <column data-g-width="150" data-g-views="mobile,desktop" data-g-member="name">
        </column>
        <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="key">
        </column>
        <column data-g-width="150" data-g-views="mobile,desktop" data-g-member="key2">
        </column>
    </script>
</div>
<script type="text/javascript">
    var SimpleItemsProvider = (function () {
        var items = [
                { name: "Jong", key: "Figgins", key2: "a3", detail: "details item a1 a4", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Sharilyn", key: "Ham", key2: "b4", detail: "details item b1 c3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Matthew", key: "Holz", key2: "a2", detail: "details item c1 b3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Jasmine", key: "Seidel", key2: "a3", detail: "details item a2 a3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Nevada", key: "Ronan", key2: "a1", detail: "details item b2 c2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Christiana ", key: "Gardella", key2: "b4", detail: "details item c2 b2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Cathrine", key: "Swanson", key2: "a1", detail: "details item a3 a2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                { name: "Allena", key: "Gardella", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Rufina", key: "Gardella", key2: "b4", detail: "details item c3 b1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Sonny", key: "Swanson", key2: "c2", detail: "details item a4 a1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                { name: "Allena", key: "Arboleda", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                { name: "Nicole", key: "Newlin", key2: "c4", detail: "details item c3 b1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                { name: "Theron", key: "Thrush", key2: "b4", detail: "details item c2 b2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                { name: "Georgann", key: "Smartt", key2: "b2", detail: "details item a3 a2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                { name: "Rob", key: "Premo", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } }
        ];

        SimpleItemsProvider.prototype.isSortable = function () {
            return false;
        }

        SimpleItemsProvider.prototype.isFilterable = function () {
            return false;
        }

        function SimpleItemsProvider() {
            for (var i = 0; i < items.length; i++) {
                items[i].key2 = i;
                items[i].detail = items[i].detail + " " + i;
            }
        }

        SimpleItemsProvider.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
            var oldItems = new Array();
            oldItems = oldItems.concat(items);
            sort(sortDescriptors);
            setTimeout(function () {
                callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                items = new Array();
                items = items.concat(oldItems);
            }, 200);
        };

        SimpleItemsProvider.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
            callback(onFiltering(filterDescriptors).length);
        };

        function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
            if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                return items;
            }
            var isCollapsedItem = [];
            for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                isCollapsedItem.push(false);
            }

            var filterdItems = [];
            for (var j = 0; j < items.length; j++) {
                // filtering common filters
                var isFiltered = 0;
                for (var i = 0; i < filterDescriptors.length; i++) {
                    if (filter(items[j], filterDescriptors[i])) {
                        isFiltered++;
                    }
                }

                // filtering collapsed filter
                var isCollapsedFiltered = false;
                var numberfilter = -1;
                for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                    if (filter(items[j], collapsedFilterDescriptors[i])) {
                        isCollapsedFiltered = true;
                        numberfilter = i;
                        i = collapsedFilterDescriptors.length;
                    }
                }

                if (isFiltered == 0 && !isCollapsedFiltered) {
                    filterdItems.push(items[j]);
                } else {
                    if (isFiltered == 0) {
                        if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                            var fakeItem = {};
                            fakeItem["isFakeItem"] = true;
                            fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                            for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                            }
                            filterdItems.push(fakeItem);
                            isCollapsedItem[numberfilter] = true;
                        }
                    }
                }
            }

            return filterdItems;
        }

        function filter(item, filterDescriptors) {
            if (isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                if (filterDescriptors.children.length == 0) {
                    return true;
                } else {
                    var result = 0
                    for (var i = 0; i < filterDescriptors.children.length; i++) {
                        if (isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                            result++;
                        }
                    }
                    if (result == filterDescriptors.children.length) {
                        return true;
                    }
                }
            }

            return false;
        }

        function isFiltering(item, value, condition) {
            // on true push to filtered items
            switch (condition) {
                case 1://equal
                    return (item == value);
                case 2://not equal
                    return (item != value);
            }
            return false;
        }

        function sort(sortDescriptor) {
            if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                items.sort(function (a, b) {
                    return sortingRecursive(a, b, sortDescriptor, 0);
                });
            }
        };

        function sortingRecursive(a, b, sortDescriptor, i) {
            if (i != sortDescriptor.length - 1) {
                if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                    return sortingOrder(sortDescriptor[i]);
                if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                    return sortingOrderDesc(sortDescriptor[i]);
                return sortingRecursive(a, b, sortDescriptor, i + 1)
            } else {
                return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
            }
        }

        function sortingOrder(sortDescriptor) {
            return sortDescriptor.asc ? -1 : 1;
        }

        function sortingOrderDesc(sortDescriptor) {
            return sortDescriptor.asc ? 1 : -1;
        }

        function compareItems(item1, item2, columns) {
            for (var i = 0; i < columns.length; i++) {
                if (item1[columns[i]] != item2[columns[i]]) {
                    return false;
                }
            }

            return true;
        }

        return SimpleItemsProvider;
    })();

    function vm() {
        var self = this;
        self.nameColumnTitle = "First Name";

        self.itemsProvider = new SimpleItemsProvider();
    };

    $(function () {
        ko.applyBindings(new vm());
    });
</script>
    </div>
</body>
</html>
