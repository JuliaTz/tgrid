@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SimpleGridWithoutPaging</title>
    <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">

   @* <script src="~/Scripts/angular.js"></script>*@
    <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
    <script src="~/Scripts/iframe/knockout-2.3.0.js"></script>

    <script src="~/Scripts/iframe/BaseHtmlProvider.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/KnockoutHtmlProvider.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/KnockoutFooterViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/KnockoutFilterPopupViewModel.js" type="text/javascript"></script>
    @*<script src="~/Scripts/AngularHtmlProvider.js" type="text/javascript"></script>*@
    <script src="~/Scripts/iframe/options.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/ItemViewModel.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/TGrid.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/TGridBinding.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/TGridDirective.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/SortDescriptor.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/FilterDescriptor.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/GroupHeaderDescriptor.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/utils.js" type="text/javascript"></script>
    <style>
        #test-knockout{
            width:480px;
            margin-left: 47px;
        }        
    </style>
</head>
<body>
    <div>
        <div id="test-knockout" data-bind="tgrid: { provider: itemsProvider, pageSize: '10', selectMode: '0', groupBy: [], enableVirtualScroll: 'false', enablePaging: 'false', enableGrouping: 'false' }">
            <script type="text/html">
                <column data-g-width="150" data-g-views="mobile,desktop" data-g-sort-member="name" data-g-group-member="name">
            <header>
                <span data-bind="text: nameColumnTitle"></span>
            </header>
            <cell>
                <span data-bind="text: item.name"></span>
            </cell>            
        </column>
                <column data-g-width="100" data-g-views="mobile,desktop" data-g-sort-member="key" data-g-group-member="key">
            <header>Last Name</header>
            <cell>
                <span data-bind="text: item.key"></span>
            </cell>         
            </celldetail>
        </column>
                <column data-g-width="150" data-g-views="mobile,desktop" data-g-sort-member="key2" data-g-group-member="key2">
            <header>
                <span>Age</span>
            </header>
            <cell>
                <span data-bind="text: item.key2"></span>
            </cell>          
        </column>
        <mobile>
            <div>
                <span>Name: </span>
                <span data-bind="text: item.name"></span>
                <a href data-bind="click: function () { getCellDetailFor(0); }">[]</a>
                <br />
                <span>Key: </span>
                <span data-bind="text: item.key"></span>
                <a href data-bind="click: function () { getCellDetailFor(1); }">[]</a>
                <br />
                <span>Key2: </span>
                <span data-bind="text: item.key2"></span>
            </div>
        </mobile>
        <groupheader>
            <div>
                <span style="color: brown;" data-bind="text: item.value"></span>
            </div>
        </groupheader>
            </script>
        </div>
        <script type="text/javascript">
            var SimpleItemsProvider = (function () {
                var items = [
                        { name: "Jong", key: "Figgins", key2: "a3", detail: "details item a1 a4", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Sharilyn", key: "Ham", key2: "b4", detail: "details item b1 c3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Matthew", key: "Holz", key2: "a2", detail: "details item c1 b3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Jasmine", key: "Seidel", key2: "a3", detail: "details item a2 a3", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Nevada", key: "Ronan", key2: "a1", detail: "details item b2 c2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Christiana ", key: "Gardella", key2: "b4", detail: "details item c2 b2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Cathrine", key: "Swanson", key2: "a1", detail: "details item a3 a2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                        { name: "Allena", key: "Gardella", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Rufina", key: "Gardella", key2: "b4", detail: "details item c3 b1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Sonny", key: "Swanson", key2: "c2", detail: "details item a4 a1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } },
                        { name: "Allena", key: "Arboleda", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                        { name: "Nicole", key: "Newlin", key2: "c4", detail: "details item c3 b1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                        { name: "Theron", key: "Thrush", key2: "b4", detail: "details item c2 b2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                        { name: "Georgann", key: "Smartt", key2: "b2", detail: "details item a3 a2", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 2 } },
                        { name: "Rob", key: "Premo", key2: "b1", detail: "details item b3 c1", detail_name: "details item First Name", detail_key: "details item Last Name", details: { a: "test", b: 1 } }
                ];

                SimpleItemsProvider.prototype.isSortable = function () {
                    return false;
                }

                SimpleItemsProvider.prototype.isFilterable = function () {
                    return true;
                }

                function SimpleItemsProvider() {
                    for (var i = 0; i < items.length; i++) {
                        items[i].key2 = i;
                        items[i].detail = items[i].detail + " " + i;
                    }
                }

                SimpleItemsProvider.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                    var oldItems = new Array();
                    oldItems = oldItems.concat(items);
                    sort(sortDescriptors);
                    setTimeout(function () {
                        callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                        items = new Array();
                        items = items.concat(oldItems);
                    }, 200);
                };

                SimpleItemsProvider.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                    callback(onFiltering(filterDescriptors).length);
                };

                function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                    if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                        return items;
                    }
                    var isCollapsedItem = [];
                    for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                        isCollapsedItem.push(false);
                    }

                    var filterdItems = [];
                    for (var j = 0; j < items.length; j++) {
                        // filtering common filters
                        var isFiltered = 0;
                        for (var i = 0; i < filterDescriptors.length; i++) {
                            if (filter(items[j], filterDescriptors[i])) {
                                isFiltered++;
                            }
                        }

                        // filtering collapsed filter
                        var isCollapsedFiltered = false;
                        var numberfilter = -1;
                        for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                            if (filter(items[j], collapsedFilterDescriptors[i])) {
                                isCollapsedFiltered = true;
                                numberfilter = i;
                                i = collapsedFilterDescriptors.length;
                            }
                        }

                        if (isFiltered == 0 && !isCollapsedFiltered) {
                            filterdItems.push(items[j]);
                        } else {
                            if (isFiltered == 0) {
                                if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                    var fakeItem = {};
                                    fakeItem["isFakeItem"] = true;
                                    fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                    for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                        fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                    }
                                    filterdItems.push(fakeItem);
                                    isCollapsedItem[numberfilter] = true;
                                }
                            }
                        }
                    }

                    return filterdItems;
                }

                function filter(item, filterDescriptors) {
                    if (isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                        if (filterDescriptors.children.length == 0) {
                            return true;
                        } else {
                            var result = 0
                            for (var i = 0; i < filterDescriptors.children.length; i++) {
                                if (isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                    result++;
                                }
                            }
                            if (result == filterDescriptors.children.length) {
                                return true;
                            }
                        }
                    }

                    return false;
                }

                function isFiltering(item, value, condition) {
                    // on true push to filtered items
                    switch (condition) {
                        case 1://equal
                            return (item == value);
                        case 2://not equal
                            return (item != value);
                    }
                    return false;
                }

                function sort(sortDescriptor) {
                    if (sortDescriptor != null && sortDescriptor.length > 0) {
                        items.sort(function (a, b) {
                            return sortingRecursive(a, b, sortDescriptor, 0);
                        });
                    }
                };

                function sortingRecursive(a, b, sortDescriptor, i) {
                    if (i != sortDescriptor.length - 1) {
                        if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                            return sortingOrder(sortDescriptor[i]);
                        if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                            return sortingOrderDesc(sortDescriptor[i]);
                        return sortingRecursive(a, b, sortDescriptor, i + 1)
                    } else {
                        return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                    }
                }

                function sortingOrder(sortDescriptor) {
                    return sortDescriptor.asc ? -1 : 1;
                }

                function sortingOrderDesc(sortDescriptor) {
                    return sortDescriptor.asc ? 1 : -1;
                }

                function compareItems(item1, item2, columns) {
                    for (var i = 0; i < columns.length; i++) {
                        if (item1[columns[i]] != item2[columns[i]]) {
                            return false;
                        }
                    }

                    return true;
                }

                return SimpleItemsProvider;
            })();

            function vm() {
                var self = this;
                self.nameColumnTitle = "Name";
                self.itemsProvider = new SimpleItemsProvider();
            };

            $(function () {
                ko.applyBindings(new vm());
            });
        </script>

    </div>
</body>
</html>
