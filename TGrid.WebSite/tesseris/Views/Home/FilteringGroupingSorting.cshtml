@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>SimpleGridWithoutPaging</title>
    <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">

    <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
    <script src="~/Scripts/iframe/knockout-2.3.0.js"></script>

    <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-knockout-min.js" type="text/javascript"></script>   
</head>
<body>
    <div>
        <div id="test-knockout" data-bind="tgrid: { provider: itemsProvider, enableFiltering: true, enableSorting: true, enableGrouping:true }">
            <script type="text/html">
                <column data-g-width="150" data-g-views="mobile,desktop" data-g-member="Name" data-g-filter-member="Name" data-g-group-member="Name" data-g-sort-member ="Name"> 
                </column>
                <column data-g-width="150" data-g-views="mobile,desktop" data-g-member="Surname" data-g-filter-member="Surname" data-g-group-member="Surname" data-g-sort-member ="Surname">
                </column>
                <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="Age" data-g-filter-member="Age" data-g-group-member="Age" data-g-sort-member ="Age">
                </column>
                <filterpopup>
                    <select data-bind="click: function(){}">
                        <option value="1">Equals</option>
                        <option value="2">Not Equals</option>
                    </select>
                    <input  style="width:150px" value=""><br>
                    <button style="width:70px" data-bind="click: function () { onApply(); }">Apply</button>
                    <button style="width:70px" data-bind="click: function () { onClear(); }">Clear</button>
                    <button style="width:70px" data-bind="click: function () { onClose(); }">Close</button>
                </filterpopup>
            </script>
        </div>
        <script type="text/javascript">
            var SimpleItemsProvider = (function () {
                var items = [
                    { Name: "John", Surname: "Figgins", Age: "20", detail: "Person details: John Figgins, 20 years, accounter", detail_Name: "First name:  John", detail_Surname: "Last name: Figgins", details: { a: "test", b: 1 } },
                    { Name: "Sharilyn", Surname: "Ham", Age: "52", detail: "Person details: Sharilyn Ham, 52 years, sales manager", detail_Name: "First name: Sharilyn", detail_Surname: "Last name: Ham", details: { a: "test", b: 1 } },
                    { Name: "Matthew", Surname: "Holz", Age: "42", detail: "Person details: Matthew Holz, 42 years, loan officer", detail_Name: "First name: Matthew", detail_Surname: "Last name: Holz", details: { a: "test", b: 1 } },
                    { Name: "Jasmine", Surname: "Seidel", Age: "32", detail: "Person details: Jasmine Seidel, 32 years, sales manager", detail_Name: "First name: Jasmine", detail_Surname: "Last name: Seidel", details: { a: "test", b: 1 } },
                    { Name: "Ashley", Surname: "Ronan", Age: "33", detail: "Person details: Ashley Ronan, 33 years, cashier", detail_Name: "First name: Ashley", detail_Surname: "Last name: Ronan", details: { a: "test", b: 1 } },
                    { Name: "Christiana ", Surname: "Gardella", Age: "35", detail: "Person details: item Christiana Gardella, 35 years, cashier", detail_Name: "First name: Christiana", detail_Surname: "Last name: Gardella", details: { a: "test", b: 1 } },
                    { Name: "Cathrine", Surname: "Swanson", Age: "30", detail: "Person details: Cathrine Swanson, 30 years, accounter", detail_Name: "First name: Cathrine", detail_Surname: "Last name: Swanson", details: { a: "test", b: 2 } },
                    { Name: "Alison", Surname: "Gardella", Age: "25", detail: "Person details: Alison Gardella, 25 years, sales manager", detail_Name: "First name: Alison", detail_Surname: "Last name: Gardella", details: { a: "test", b: 1 } },
                    { Name: "Ruth", Surname: "Gardella", Age: "20", detail: "Person details: Ruth Gardella, 20 years, retailer", detail_Name: "First name: Ruth", detail_Surname: "Last name: Gardella", details: { a: "test", b: 1 } },
                    { Name: "Samantha", Surname: "Swanson", Age: "25", detail: "Person details: Samantha Swanson, 25 years, HR officer", detail_Name: "First name: Samantha ", detail_Surname: "Last name: Swanson", details: { a: "test", b: 1 } },
                    { Name: "Alison", Surname: "Arboleda", Age: "32", detail: "Person details:Alison Arboleda, 32 years,  sales manager", detail_Name: "First name: Alison", detail_Surname: "Last name: Arboleda", details: { a: "test", b: 2 } },
                    { Name: "Nicole", Surname: "Newlin", Age: "20", detail: "Person details: Nicole Newlin, 20 years, accounter", detail_Name: "First name: Nicole", detail_Surname: "Last name: Newlin", details: { a: "test", b: 2 } },
                    { Name: "Theron", Surname: "Thrush", Age: "28", detail: "Person details: Theron Thrush, 28 years, accounter", detail_Name: "First name: Theron", detail_Surname: "Last name: Thrush", details: { a: "test", b: 2 } },
                    { Name: "George", Surname: "Smartt", Age: "19", detail: "Person details: George Smartt, 19 years, HR manager", detail_Name: "First name: George", detail_Surname: "Last name: Smartt", details: { a: "test", b: 2 } },
                    { Name: "Rob", Surname: "Premo", Age: "28", detail: "Person details: Rob Premo, 28 years,  sales manager", detail_Name: "details item First name: Rob", detail_Surname: "Last name: Premo", details: { a: "test", b: 1 } }
                ];

                function SimpleItemsProvider() {
                }

                SimpleItemsProvider.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                    var oldItems = new Array();
                    oldItems = oldItems.concat(items);
                    sort(sortDescriptors);
                    setTimeout(function () {
                        callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                        items = new Array();
                        items = items.concat(oldItems);
                    }, 1);
                };

                SimpleItemsProvider.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                    callback(onFiltering(filterDescriptors).length);
                };

                function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                    if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                        return items;
                    }

                    if (collapsedFilterDescriptors == undefined) {
                        collapsedFilterDescriptors = [];
                    }

                    var isCollapsedItem = [];
                    for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                        isCollapsedItem.push(false);
                    }

                    var filterdItems = [];
                    for (var j = 0; j < items.length; j++) {
                        // filtering common filters
                        var isFiltered = 0;
                        for (var i = 0; i < filterDescriptors.length; i++) {
                            if (filter(items[j], filterDescriptors[i])) {
                                isFiltered++;
                            }
                        }

                        // filtering collapsed filter
                        var isCollapsedFiltered = false;
                        var numberfilter = -1;
                        for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                            if (filter(items[j], collapsedFilterDescriptors[i])) {
                                isCollapsedFiltered = true;
                                numberfilter = i;
                                i = collapsedFilterDescriptors.length;
                            }
                        }

                        //add fake item for creating collapsing group
                        if (isFiltered == 0 && !isCollapsedFiltered) {
                            filterdItems.push(items[j]);
                        } else {
                            if (isFiltered == 0) {
                                if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                    var fakeItem = {};
                                    fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                    for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                        fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                    }
                                    filterdItems.push(fakeItem);
                                    isCollapsedItem[numberfilter] = true;
                                }
                            }
                        }
                    }

                    return filterdItems;
                }

                function filter(item, filterDescriptors) {
                    if (!isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                        if (filterDescriptors.children.length == 0) {
                            return true;
                        } else {
                            var result = 0
                            for (var i = 0; i < filterDescriptors.children.length; i++) {
                                if (!isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                    result++;
                                }
                            }
                            if (result == filterDescriptors.children.length) {
                                return true;
                            }
                        }
                    }

                    return false;
                }

                function isFiltering(item, value, condition) {
                    // on false push to filtered items
                    switch (condition) {
                        case 0://equal
                            return (item == value);
                        case 1://not equal
                            return (item != value);
                    }
                    return false;
                }

                function sort(sortDescriptor) {
                    if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                        items.sort(function (a, b) {
                            return sortingRecursive(a, b, sortDescriptor, 0);
                        });
                    }
                };

                function sortingRecursive(a, b, sortDescriptor, i) {
                    if (i != sortDescriptor.length - 1) {
                        if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                            return sortingOrder(sortDescriptor[i]);
                        if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                            return sortingOrderDesc(sortDescriptor[i]);
                        return sortingRecursive(a, b, sortDescriptor, i + 1)
                    } else {
                        return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                    }
                }

                function sortingOrder(sortDescriptor) {
                    return sortDescriptor.asc ? 1 : -1;
                }

                function sortingOrderDesc(sortDescriptor) {
                    return sortDescriptor.asc ? -1 : 1;
                }

                function compareItems(item1, item2, columns) {
                    for (var i = 0; i < columns.length; i++) {
                        if (item1[columns[i]] != item2[columns[i]]) {
                            return false;
                        }
                    }

                    return true;
                }

                return SimpleItemsProvider;
            })();

            function vm() {
                var self = this;
                self.nameColumnTitle = "Name";
                self.itemsProvider = new SimpleItemsProvider();
            };

            $(function () {
                ko.applyBindings(new vm());
            });
        </script>
    </div>
</body>
</html>
