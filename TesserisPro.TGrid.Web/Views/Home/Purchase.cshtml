@{
    ViewBag.Title = "Purchase";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
  <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
  <link rel="stylesheet" type="text/css" href="~/Content/purchaseStyle.css">

    <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
    <script src="~/Scripts/iframe/knockout-3.0.0.js"></script>

    <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-knockout-min.js" type="text/javascript"></script>

<h2>Purchase</h2>
<h3>Have a question? Contact us via e-mail to peleshenko@tesseris.com</h3>
<div id="test-knockout" data-bind="tgrid: { provider: itemsProvider, selectionMode: 'none' }">
            <script type="text/html">
                <column data-g-width="170" data-g-views="mobile,desktop" data-g-member="Support1">
                    <header>
                        <div style="height : 150px;">
                            <div style="font-size: large;"> Support 1</div>
                            <div style="font-size: large;"> $39.99</div>
                        </div>                
                    </header>
                </column>
                <column data-g-width="170" data-g-views="mobile,desktop" data-g-member="Support3"> 
                    <header>
                        <div style="height : 150px;">
                            <div style="font-size: large;"> Support 3</div>
                            <div style="font-size: large;"> $100.00</div>
                        </div>
                    </header>
                </column>
                <column data-g-width="170" data-g-views="mobile,desktop" data-g-member="Support6">            
                    <header>
                        <div style="height : 150px;">
                            <div style="font-size: large;"> Support 6</div>
                            <div style="font-size: large;"> $180.00</div>
                        </div>
                    </header>
                </column>
                <column data-g-width="170" data-g-views="mobile,desktop" data-g-member="Support12">            
                    <header>
                        <div style="height : 150px;">
                            <div style="font-size: large;"> Support 12</div>
                            <div style="font-size: large;"> $300.00</div> 
                        </div>
                    </header>
                </column>
                <column data-g-width="170" data-g-views="mobile,desktop" data-g-member="SupportPro">            
                    <header>
                        <div style="height : 150px;">
                           <div style="font-size: large;"> Support Pro</div>
                            <div style="font-size: large;"> $500.00</div> 
                        </div>
                    </header>
                </column>
            </script>
        </div>
        <script type="text/javascript">
            var SimpleItemsProvider = (function () {
                var items = [
                    { Support1: "1 month support", Support3: "3 month support", Support6: "6 month support", Support12: "12 month support", SupportPro: "24 month support", detail_Surname: "Last name: Ham", details: { a: "test", b: 1 } },
                    { Support1: "Free Updates", Support3: "Free Updates", Support6: "Free Updates", Support12: "Free Updates", SupportPro: "Free Updates", detail_Surname: "Last name: Holz", details: { a: "test", b: 1 } },
                    { Support1: "Full Source Code", Support3: "Full Source Code", Support6: "Full Source Code", Support12: "Full Source Code", SupportPro: "Full Source Code", detail_Surname: "Last name: Seidel", details: { a: "test", b: 1 } },
                    { Support1: "Dedicated Support", Support3: "Dedicated Support", Support6: "Dedicated Support", Support12: "Dedicated Support", SupportPro: "Dedicated Support", detail_Surname: "Last name: Ronan", details: { a: "test", b: 1 } },
                ];

                function SimpleItemsProvider() {
                }

                SimpleItemsProvider.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, collapsedFilterDescriptors, filterDescriptors, callback) {
                    var oldItems = new Array();
                    oldItems = oldItems.concat(items);
                    sort(sortDescriptors);
                    setTimeout(function () {
                        callback(filtering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                        items = new Array();
                        items = items.concat(oldItems);
                    }, 200);
                };

                SimpleItemsProvider.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                    callback(filtering(filterDescriptors).length);
                };

                function filtering(filterDescriptors, collapsedFilterDescriptors) {
                    if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                        return items;
                    }

                    var isCollapsedItem = [];
                    for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                        isCollapsedItem.push(false);
                    }

                    var filterdItems = [];
                    for (var j = 0; j < items.length; j++) {
                        // filtering common filters
                        var isFiltered = 0;
                        for (var i = 0; i < filterDescriptors.length; i++) {
                            if (filter(items[j], filterDescriptors[i])) {
                                isFiltered++;
                            }
                        }

                        // filtering collapsed filter
                        var isCollapsedFiltered = false;
                        var numberfilter = -1;
                        for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                            if (filter(items[j], collapsedFilterDescriptors[i])) {
                                isCollapsedFiltered = true;
                                numberfilter = i;
                                i = collapsedFilterDescriptors.length;
                            }
                        }

                        if (isFiltered == 0 && !isCollapsedFiltered) {
                            filterdItems.push(items[j]);
                        } else {
                            if (isFiltered == 0) {
                                if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                    var fakeItem = {};
                                    fakeItem["isFakeItem"] = true;
                                    fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                    for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                        fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                    }
                                    filterdItems.push(fakeItem);
                                    isCollapsedItem[numberfilter] = true;
                                }
                            }
                        }
                    }

                    return filterdItems;
                }

                function filter(item, filterDescriptors) {
                    if (isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                        if (filterDescriptors.children.length == 0) {
                            return true;
                        } else {
                            var result = 0
                            for (var i = 0; i < filterDescriptors.children.length; i++) {
                                if (isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                    result++;
                                }
                            }
                            if (result == filterDescriptors.children.length) {
                                return true;
                            }
                        }
                    }

                    return false;
                }

                function isFiltering(item, value, condition) {
                    // on true push to filtered items
                    switch (condition) {
                        case 1://equal
                            return (item == value);
                        case 2://not equal
                            return (item != value);
                    }
                    return false;
                }

                function sort(sortDescriptor) {
                    if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                        items.sort(function (a, b) {
                            return sortingRecursive(a, b, sortDescriptor, 0);
                        });
                    }
                };

                function sortingRecursive(a, b, sortDescriptor, i) {
                    if (i != sortDescriptor.length - 1) {
                        if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                            return sortingOrder(sortDescriptor[i]);
                        if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                            return sortingOrderDesc(sortDescriptor[i]);
                        return sortingRecursive(a, b, sortDescriptor, i + 1)
                    } else {
                        return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                    }
                }

                function sortingOrder(sortDescriptor) {
                    return sortDescriptor.asc ? -1 : 1;
                }

                function sortingOrderDesc(sortDescriptor) {
                    return sortDescriptor.asc ? 1 : -1;
                }

                function compareItems(item1, item2, columns) {
                    for (var i = 0; i < columns.length; i++) {
                        if (item1[columns[i]] != item2[columns[i]]) {
                            return false;
                        }
                    }

                    return true;
                }

                return SimpleItemsProvider;
            })();

            function vm() {
                var self = this;
                self.nameColumnTitle = "First Name";

                self.itemsProvider = new SimpleItemsProvider();
            };

            $(function () {
                ko.applyBindings(new vm());
            });
        </script>
    </div>
