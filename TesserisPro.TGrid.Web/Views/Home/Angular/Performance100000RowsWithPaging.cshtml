@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>RowsWithVirtualizationAngular</title>
    <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
    <link rel="stylesheet" type="text/css" href="~/Content/iframe.css">
   
    <script src="~/Scripts/iframe/angular.js"></script>
    <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
    <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
    <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
</head>
<body>
   <input id ="url" hidden ="hidden" value ="@Url.Content("~")"/>
    <div ng-app="TGrid"> 
        <div ng-controller="ctrl">
            <t-grid id="test-angular" provider="dataProvider" pageSize="5" pageSlide="4" enablePaging="true">
                <script type="text/html">
                    <column data-g-width="55" data-g-views="mobile,desktop"  data-g-member="Number">
                    </column>
                    <column data-g-width="100" data-g-views="mobile,desktop"  data-g-member="Company">
                    </column>
                    <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="City"> 
                    </column>
                     <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="Year">
                    </column>
                     <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="Employees">
                    </column>
                     <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="Picture">
                         <cell> <img width="100px" height='60px' style: "" ng-src="{{item.Picture}}" /></cell>
                    </column>
                     <footer>
                        <div class ="footer">
                            Total Count: <span >{{totalCount}}</span>
                            Current Page: <span >{{currentPage}}</span>
                            Total Pages: <span >{{totalPages}}</span>
                        </div>
                    </footer>  
                </script>
            </t-grid>
        </div>
    </div>
    <script type="text/javascript">
        var SimpleItemsProviderAngular = (function () {
            var items = [];

            SimpleItemsProviderAngular.prototype.getRandomInt = function getRandomInt(min, max) {
                return Math.floor(Math.random() * (max - min + 1) + min);
            }

            var genarateRandomInt = SimpleItemsProviderAngular.prototype.getRandomInt;
            (function (genarateRandomInt, items) {
                var companies = ['Parmalat', 'Pepper Lunch', 'PepsiCo', 'Petronas', 'Lockheed Martin', "L'Oréal", 'Luxottica', "McDonald's", 'Maggi', 'Marriott', 'Martini & Rossi', 'Electronic Data Systems', 'Electrolux', 'Emerson Electric', 'Epson', 'Bridgestone', 'BP', 'Cadbury Schweppes', 'Alcatel-Lucent', 'Allianz', 'Danone', 'Dell'];
                var employees = ['100', '127', '150', '380', '1050', '157', '277', '562', '436', '780', '523', '191', '163', '514', '1205', '950', '552', '671', '254', '267', '824', '732'];
                var picturesPaths = ['truck1.png', 'truck3.jpg', 'truck4.png', 'truck5.png', 'truck6.png', 'truck7.png',
                                    'truck8.png', 'truck9.png', 'truck10.jpg', 'truck11.jpg', 'truck12.png', 'truck13.png', 'truck14.png', 'truck15.png',
                                        'truck16.png', 'truck17.png', 'truck18.png'];
                var cities = ['New York', 'London', 'Boston', 'Dublin', 'Burmingham', 'Munich', 'Berlin', 'Francfurt', 'Hamburg', 'Washington DC', 'San Diego', 'San Francisco', 'Chicago', 'Rome', 'Milan', 'Turin', 'Palermo', 'Florence', 'Paris', 'Nantes', 'Lyon', 'Marsellie', 'Toulouse', 'Madrid', 'Barcelona', 'Seville', 'Valencia'];

                var path = document.getElementById("url") != null ? document.getElementById("url").value : "/";
                for (var i = 1; i <= 100000; i++) {
                    items.push({
                        Number: i,
                        Company: companies[genarateRandomInt(0, companies.length - 1)],
                        City: cities[genarateRandomInt(0, cities.length - 1)],
                        Year: genarateRandomInt(1953, 1999),
                        Employees: employees[genarateRandomInt(0, employees.length - 1)],
                        Picture: path.concat("Content/images/picturesForGrid/").concat(picturesPaths[genarateRandomInt(0, picturesPaths.length - 1)])
                    });
                }
            })(genarateRandomInt, items);

            function SimpleItemsProviderAngular() {

            }

            SimpleItemsProviderAngular.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                var oldItems = new Array();
                oldItems = oldItems.concat(items);
                sort(sortDescriptors);
                setTimeout(function () {
                    callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                    items = new Array();
                    items = items.concat(oldItems);
                }, 200);
            };

            SimpleItemsProviderAngular.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                callback(onFiltering(filterDescriptors).length);
            };

            function sort(sortDescriptor) {
                if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                    items.sort(function (a, b) {
                        return sortingRecursive(a, b, sortDescriptor, 0);
                    });
                }
            };

            function sortingRecursive(a, b, sortDescriptor, i) {
                if (i != sortDescriptor.length - 1) {
                    if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                        return sortingOrder(sortDescriptor[i]);
                    if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                        return sortingOrderDesc(sortDescriptor[i]);
                    return sortingRecursive(a, b, sortDescriptor, i + 1)
                } else {
                    return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                }
            }

            function sortingOrder(sortDescriptor) {
                return sortDescriptor.asc ? 1 : -1;
            }

            function sortingOrderDesc(sortDescriptor) {
                return sortDescriptor.asc ? -1 : 1;
            }

            function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                    return items;
                }

                if (collapsedFilterDescriptors == undefined) {
                    collapsedFilterDescriptors = [];
                }

                var isCollapsedItem = [];
                for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                    isCollapsedItem.push(false);
                }

                var filterdItems = [];
                for (var j = 0; j < items.length; j++) {
                    // filtering common filters
                    var isFiltered = 0;
                    for (var i = 0; i < filterDescriptors.length; i++) {
                        if (filter(items[j], filterDescriptors[i])) {
                            isFiltered++;
                        }
                    }

                    // filtering collapsed filter
                    var isCollapsedFiltered = false;
                    var numberfilter = -1;
                    for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                        if (filter(items[j], collapsedFilterDescriptors[i])) {
                            isCollapsedFiltered = true;
                            numberfilter = i;
                            i = collapsedFilterDescriptors.length;
                        }
                    }

                    //add fake item for creating collapsing group
                    if (isFiltered == 0 && !isCollapsedFiltered) {
                        filterdItems.push(items[j]);
                    } else {
                        if (isFiltered == 0) {
                            if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                var fakeItem = {};
                                fakeItem["isFakeItem"] = true;
                                fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                    fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                }
                                filterdItems.push(fakeItem);
                                isCollapsedItem[numberfilter] = true;
                            }
                        }
                    }
                }

                return filterdItems;
            }

            function filter(item, filterDescriptors) {
                if (!isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                    if (filterDescriptors.children.length == 0) {
                        return true;
                    } else {
                        var result = 0
                        for (var i = 0; i < filterDescriptors.children.length; i++) {
                            if (!isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                result++;
                            }
                        }
                        if (result == filterDescriptors.children.length) {
                            return true;
                        }
                    }
                }

                return false;
            }

            function isFiltering(item, value, condition) {
                // on false push to filtered items
                switch (condition) {
                    case 1://equal
                        return (item == value);
                    case 2://not equal
                        return (item != value);
                }
                return false;
            }

            return SimpleItemsProviderAngular;
        })();

        var TGrid = angular.module('TGrid', [])
            .controller("ctrl", function ctrl($scope) {
                $scope.dataProvider = new SimpleItemsProviderAngular();
            })
            .directive('tGrid', TGrid.Angular.Directive);

        $(function () {
        })
    </script>
</body>
</html>
