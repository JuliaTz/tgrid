@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>PagingMobileAngular</title>
        <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
        <link rel="stylesheet" type="text/css" href="~/Content/iframe.css">
   
        <script src="~/Scripts/iframe/angular.js"></script>
        <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>
        <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
    </head>
    <body>
        <div ng-app="TGrid"> 
            <div ng-controller="ctrl">
                <t-grid id="test-angular" provider="dataProvider" enableVirtualScroll="true">
                        <script type="text/html">
                            <column data-g-width="75" data-g-views="mobile,desktop" data-g-member ="CompanyId">
                        </column>
                        <column data-g-width="150" data-g-views="mobile,desktop" data-g-member ="Country">
                        </column>
                        <column data-g-width="150" data-g-views="mobile,desktop" data-g-member ="City">
                        </column>
                        <column data-g-width="150" data-g-views="mobile,desktop" data-g-member ="Street">
                        </column>
                    </script>
                </t-grid>
            </div>
        </div>
       <script type="text/javascript">
           var SimpleItemsProviderAngular = (function () {
               var items = [
                       { CompanyId: "1", Country: "Great Britain", City: "Boston", Street: "Cottage St", detail_Company: "Company name: Flowers Delivery", detail: "Address: Great Britain, Boston, Cottage St" },
                       { CompanyId: "2", Country: "France", City: "Nantes", Street: "Talensac", detail_Company: "Company name: BHF", detail: "Address: France, Nantes, Talensac" },
                       { CompanyId: "3", Country: "Italy", City: "Rome", Street: "Labicana", detail_Company: "Company name: Rome Tour", detail: "Address: Italy, Rome, Labicana" },
                       { CompanyId: "4", Country: "Italy", City: "Naples", Street: "Ferrara", detail_Company: "Company name: Naples Fish", detail: "Address: Italy, Naples, Ferrara" },
                       { CompanyId: "5", Country: "Germany", City: "Frankfurt", Street: "Dreieich", detail_Company: "Company name: Danshtain", detail: "Address: Germany, Frankfurt, Dreieich" },
                       { CompanyId: "8", Country: "USA", City: "New York", Street: "Franklin", detail_Company: "Company name: McSandersAndCo", detail: "Address: USA, New York, Franklin" },
                       { CompanyId: "6", Country: "Italy", City: "Rome", Street: "Cavour", detail_Company: "Company name: Zingaly", detail: "Address: Rome, Italy, Cavour" },
                       { CompanyId: "7", Country: "Germany", City: "Frankfurt", Street: "Dreieich", detail_Company: "Company name: Lastwagen", detail: "Address: Germany, Frankfurt, Dreieich" },
                       { CompanyId: "7", Country: "Germany", City: "Hamburg", Street: "Bramfeld", detail_Company: "Company name: Lastwagen", detail: "Address: Germany, Hamburg, Bramfeld" },
                       { CompanyId: "2", Country: "France", City: "Nantes", Street: "Saget", detail_Company: "Company name: BHF", detail: "Address: France, Nantes, Saget" },
                       { CompanyId: "4", Country: "Italy", City: "Naples", Street: "Miano", detail_Company: "Company name: Naples Fish", detail: "Address: Italy, Naples, Miano" },
                       { CompanyId: "1", Country: "Great Britain", City: "London", Street: "New Oxford", detail_Company: "Company name: Flowers Delivery", detail: "Address: Great Britain, London, New Oxford" },
                       { CompanyId: "1", Country: "Great Britain", City: "London", Street: "Wigmore", detail_Company: "Company name: Flowers Delivery", detail: "Address: Great Britain, London, Wigmore" },
                       { CompanyId: "7", Country: "Germany", City: "Frankfurt", Street: "Dreieich", detail_Company: "Company name: Lastwagen", detail: "Address: Germany, Frankfurt, Dreieich" },
                       { CompanyId: "8", Country: "USA", City: "New York", Street: "Melrose Avenue", detail_Company: "Company name: McSandersAndCo", detail: "Address: USA, New York, Melrose Avenue" },
                       { CompanyId: "9", Country: "USA", City: "Little Rock", Street: "Boone", detail_Company: "Company name: Target", detail: "Address: USA, Little Rock, Boone" },
                       { CompanyId: "10", Country: "Great Britain", City: "Birmingham", Street: "Alumn Rock", detail_Company: "Company name: Mars, Inc", detail: "Address: Great Britain, Birmingham, Alumn Rock" },
                       { CompanyId: "10", Country: "Great Britain", City: "Bristol", Street: "Barton Hill", detail_Company: "Company name: Mars, Inc", detail: "Address: Great Britain, Bristol, Barton Hill" },
                       { CompanyId: "10", Country: "Spain", City: "Valencia", Street: "Picanya", detail_Company: "Company name: Mars, Inc", detail: "Address: Spain, Valencia, Picanya" },
                       { CompanyId: "10", Country: "Spain", City: "Valencia", Street: "Rocafort", detail_Company: "Company name: Mars, Inc", detail: "Address: Spain, Valencia, Rocafort" },
                       { CompanyId: "11", Country: "Germany", City: "Munich", Street: "Lieberweg", detail_Company: "Company name: TEKsystems", detail: "Address: Germany, Munich, Lieberweg" },
                       { CompanyId: "11", Country: "Denmark", City: "Odense", Street: "Bellinge", detail_Company: "Company name: TEKsystems", detail: "Address: Denmark, Odense, Bellinge" },
                       { CompanyId: "6", Country: "Italy", City: "Rome", Street: "Cavour", detail_Company: "Company name: Zingaly", detail: "Address: Rome, Italy, Cavour" },
                       { CompanyId: "7", Country: "Germany", City: "Frankfurt", Street: "Dreieich", detail_Company: "Company name: Lastwagen", detail: "Address: Germany, Frankfurt, Dreieich" },
                       { CompanyId: "13", Country: "Germany", City: "Munich", Street: "Ottostrabe", detail_Company: "Company name: Grainger", detail: "Address: Germany, Munich, Ottostrabe" },
                       { CompanyId: "13", Country: "France", City: "Nantes", Street: "Saget", detail_Company: "Company name: BHF", detail: "Address: France, Nantes, Saget" },
                       { CompanyId: "14", Country: "Italy", City: "Turin", Street: "Cenicia", detail_Company: "Company name: Mariott Intarnational, Inc", detail: "Address: Italy, Turin, Cenicia" },
                       { CompanyId: "15", Country: "Denmark", City: "Odense", Street: "Assensvej", detail_Company: "Company name: Hasbro, Inc", detail: "Address: Denmark, Odense, Assensvej" },
                       { CompanyId: "16", Country: "Great Britain", City: "Boston", Street: "Frampton", detail_Company: "Company name: Balfour Beatty Construction", detail: "Address: Great Britain, Boston, Frampton" },
                       { CompanyId: "7", Country: "Germany", City: "Frankfurt", Street: "Dreieich", detail_Company: "Company name: Lastwagen", detail: "Address: Germany, Frankfurt, Dreieich" },
                       { CompanyId: "17", Country: "Italy", City: "Turin", Street: "Santa Rita", detail_Company: "Company name: Deloitte", detail: "Address: Italy, Turin, Santa Rita" },
                       { CompanyId: "9", Country: "USA", City: "Madison", Street: "Fitchburg", detail_Company: "Company name: Target", detail: "Address: USA, Madison, Fitchburg" }
               ];

               function SimpleItemsProviderAngular() {
               }

               SimpleItemsProviderAngular.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                   var oldItems = new Array();
                   oldItems = oldItems.concat(items);
                   sort(sortDescriptors);
                   setTimeout(function () {
                       callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                       items = new Array();
                       items = items.concat(oldItems);
                   }, 200);
               };

               SimpleItemsProviderAngular.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                   callback(onFiltering(filterDescriptors).length);
               };

               function sort(sortDescriptor) {
                   if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                       items.sort(function (a, b) {
                           return sortingRecursive(a, b, sortDescriptor, 0);
                       });
                   }
               };

               function sortingRecursive(a, b, sortDescriptor, i) {
                   if (i != sortDescriptor.length - 1) {
                       if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                           return sortingOrder(sortDescriptor[i]);
                       if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                           return sortingOrderDesc(sortDescriptor[i]);
                       return sortingRecursive(a, b, sortDescriptor, i + 1)
                   } else {
                       return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                   }
               }

               function sortingOrder(sortDescriptor) {
                   return sortDescriptor.asc ? 1 : -1;
               }

               function sortingOrderDesc(sortDescriptor) {
                   return sortDescriptor.asc ? -1 : 1;
               }

               function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                   if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                       return items;
                   }

                   if (collapsedFilterDescriptors == undefined) {
                       collapsedFilterDescriptors = [];
                   }

                   var isCollapsedItem = [];
                   for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                       isCollapsedItem.push(false);
                   }

                   var filterdItems = [];
                   for (var j = 0; j < items.length; j++) {
                       // filtering common filters
                       var isFiltered = 0;
                       for (var i = 0; i < filterDescriptors.length; i++) {
                           if (filter(items[j], filterDescriptors[i])) {
                               isFiltered++;
                           }
                       }

                       // filtering collapsed filter
                       var isCollapsedFiltered = false;
                       var numberfilter = -1;
                       for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                           if (filter(items[j], collapsedFilterDescriptors[i])) {
                               isCollapsedFiltered = true;
                               numberfilter = i;
                               i = collapsedFilterDescriptors.length;
                           }
                       }

                       //add fake item for creating collapsing group
                       if (isFiltered == 0 && !isCollapsedFiltered) {
                           filterdItems.push(items[j]);
                       } else {
                           if (isFiltered == 0) {
                               if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                   var fakeItem = {};
                                   fakeItem["isFakeItem"] = true;
                                   fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                   for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                       fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                   }
                                   filterdItems.push(fakeItem);
                                   isCollapsedItem[numberfilter] = true;
                               }
                           }
                       }
                   }

                   return filterdItems;
               }

               function filter(item, filterDescriptors) {
                   if (!isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                       if (filterDescriptors.children.length == 0) {
                           return true;
                       } else {
                           var result = 0
                           for (var i = 0; i < filterDescriptors.children.length; i++) {
                               if (!isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                   result++;
                               }
                           }
                           if (result == filterDescriptors.children.length) {
                               return true;
                           }
                       }
                   }

                   return false;
               }

               function isFiltering(item, value, condition) {
                   // on false push to filtered items
                   switch (condition) {
                       case 1://equal
                           return (item == value);
                       case 2://not equal
                           return (item != value);
                   }
                   return false;
               }

               return SimpleItemsProviderAngular;
           })();

           var TGrid = angular.module('TGrid', [])
               .controller("ctrl", function ctrl($scope) {
                   $scope.dataProvider = new SimpleItemsProviderAngular();
               })
               .directive('tGrid', TGrid.Angular.Directive);

           $(function () {
           })
        </script> 
    </body>
</html>
