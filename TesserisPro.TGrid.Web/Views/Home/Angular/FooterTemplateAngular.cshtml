@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>RowsWithVirtualizationAngular</title>
        <link rel="stylesheet" type="text/css" href="~/Content/Grid.css">
        <link rel="stylesheet" type="text/css" href="~/Content/iframe.css">
   
        <script src="~/Scripts/iframe/angular.js"></script>
        <script src="~/Scripts/iframe/jquery-2.0.3.js"></script>

      @*  <script src="~/Scripts/iframe/BaseHtmlProvider.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/AngularHtmlProvider.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/AngularFooterViewModel.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/AngularFilterPopupViewModel.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/AngularItemViewModel.js" type="text/javascript"></script> 
        <script src="~/Scripts/iframe/options.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/ItemViewModel.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/TGrid.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/TGridDirective.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/SortDescriptor.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/FilterDescriptor.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/GroupHeaderDescriptor.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/utils.js" type="text/javascript"></script>*@

        <script src="~/Scripts/iframe/tgrid-min.js" type="text/javascript"></script>
        <script src="~/Scripts/iframe/tgrid-angular-min.js" type="text/javascript"></script>
    </head>
    <body>
       <input id ="url" hidden ="hidden" value ="@Url.Content("~")"/>
        <div ng-app="TGrid"> 
            <div ng-controller="ctrl">
                <t-grid id="test-angular" provider="dataProvider" pageSize="6" pageSlide="4" enablePaging="true">
                    <script type="text/html">
                        <column data-g-width="35" data-g-views="mobile,desktop"  data-g-member="Number">
                            <header>
                                 <span>No.</span>
                            </header>
                        </column>
                         <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="Picture">
                             <cell> <img width="100px" height='60px' style: "" ng-src="{{item.Picture}}" /></cell>
                        </column>
                        <column data-g-width="70" data-g-views="mobile,desktop"  data-g-member="Brand">
                        </column>
                        <column data-g-width="120" data-g-views="mobile,desktop" data-g-member="Type"> 
                        </column>
                         <column data-g-width="100" data-g-views="mobile,desktop" data-g-member="EnginePower">
                             <header>
                                 <span>Engine power</span>
                            </header>
                             <cell>
                                 <span>{{item.EnginePower}}</span> HP
                             </cell>
                        </column>
                         <column data-g-width="60" data-g-views="mobile,desktop" data-g-member="Year">
                             <header>
                                 <span>1st Reg.</span>
                            </header>
                        </column>
                        <column data-g-width="120" data-g-views="mobile,desktop" data-g-member="Cabin">
                        </column>
                        <footer>
                            <div class ="footer" style="font-size:14px;">
                                <div class="tgrid-pagination" style="display:inline-block">
                                    <span class='tgrid-page-number' ng-click="changePage(currentPage - 1);" ng-hide="(currentPage - 1) <= 0">...</span>
                                    <span class='tgrid-page-number' ng-click="changePage(currentPage - 1);" ng-hide="(currentPage - 1) <= 0">{{currentPage - 1}}</span>
                                    <span class='tgrid-page-current' >{{currentPage}}</span>
                                    <span class='tgrid-page-number' ng-click="changePage(currentPage + 1);" ng-hide="(currentPage + 1) > totalPages">{{currentPage+1}}</span>
                                    <span class='tgrid-page-number' ng-click="changePage(currentPage + 1);" ng-hide="(currentPage+1) > totalPages" >...</span>
                                </div>
                                <span style="float:right; position:absolute; right:3px">
                                    To page: <input class="tgrid-choose-page-input" ng-model="viewPageNumber"/> 
                                    of <span>{{totalPages}}</span>
                                    <div class="tgrid-change-page-button" ng-click="changePage(viewPageNumber); $event.stopPropagation();">Go</div>
                                </span>
                            </div>
                        </footer>
                    </script>
                </t-grid>
            </div>
        </div>
        <script type="text/javascript">
            var SimpleItemsProviderAngular = (function () {
                var items = [];

                SimpleItemsProviderAngular.prototype.getRandomInt = function getRandomInt(min, max) {
                    return Math.floor(Math.random() * (max - min + 1) + min);
                }

                var generateRandomInt = SimpleItemsProviderAngular.prototype.getRandomInt;
                (function (generateRandomInt, items) {
                    var brand = ['MAN', 'DAF', 'Mercedes', 'Iveco', 'Volvo', "Scania", 'Terberg', "Renault"];
                    var hp = ['460', '510', '410', '380', '360', '430', '480', '450', '460', '460', '410', '410', '400', '500', '310'];
                    var picturesPaths = ['truck1.png', 'truck3.jpg', 'truck4.png', 'truck5.png', 'truck6.png', 'truck7.png',
                                        'truck8.png', 'truck9.png', 'truck10.jpg', 'truck11.jpg', 'truck12.png', 'truck13.png', 'truck14.png', 'truck15.png',
                                            'truck16.png', 'truck17.png', 'truck18.png'];
                    var type0 = ['TGX 18.440 XLX', 'TGX 18.680 XXL', 'TGS 33.480 LX', 'TGA 33.400 L RHD', 'TGA 18.440 XLX', 'TGA 18.400 XXL', 'TGA 18.480 M', 'TGA 33.480 M', 'TGA 18.460 LX'];
                    var type1 = ['XF105.410', 'XF105.460', 'CF85.360', 'XF105.410', 'CF85.430', 'CF85.460', 'XF95.480'];
                    var type2 = ['Actros 2541 LS', 'Actros 1848 LS', 'Actros 3350 S', 'Actros 3350 S V8 ', 'Actros 2641 S', 'Actros 2544 LSVLA', 'Actros 1844 LLS', 'Actros 3350 AS', 'Actros 1844 LS']
                    var type3 = ['Stralis AS440S50', 'Stralis AS440S45', 'Stralis AT440S45', 'Stralis AS440S43', 'EuroTech 440E43', 'EuroTech 440E38'];
                    var type4 = ['FH 500', 'FH 420 Budapest HU', 'FH 420', 'FH16 580', 'FM 300', 'FH12 460', 'FH12 420', 'FM7 290']
                    var type5 = ['G400', 'R380', 'R420', 'R480', 'R500', 'R470', 'R124L 470', 'R124L 400'];
                    var type6 = ['YT 182 Terminal Tractorhead', 'YT180 Terminal Tractorhead']
                    var type7 = ['Premium Lander 460', 'Kerax 480', 'Kerax 33.480', 'Magnum 520', 'Magnum 440', 'Premium 450', 'Kerax 420'];
                    var cabin = ['Sleepercab', 'Super Space Cab', 'Space Cab', 'Active Space', 'ActiveTime', 'Comfort Cab', 'Globetrotter', 'Globetrotter XL', 'Short', 'Sleepercab', 'Super Space Cab', 'Space Cab', 'Sleepercab', 'Space Cab', 'Megaspace (F15)'];
                    var path = document.getElementById("url") != null ? document.getElementById("url").value : "/";
                    for (var i = 1; i <= 2000; i++) {
                        var brandNumber = generateRandomInt(0, brand.length - 1);
                        var typeNumber = []
                        switch (brandNumber) {
                            case 0:
                                typeNumber = type0;
                                break;
                            case 1:
                                typeNumber = type1;
                                break;
                            case 2:
                                typeNumber = type2;
                                break;
                            case 3:
                                typeNumber = type3;
                                break;
                            case 4:
                                typeNumber = type4;
                                break;
                            case 5:
                                typeNumber = type5;
                                break;
                            case 6:
                                typeNumber = type6;
                                break;
                            case 7:
                                typeNumber = type7;
                                break;
                            default:
                                typeNumber = type0;
                        }
                        items.push({
                            Number: i,
                            Brand: brand[brandNumber],
                            Type: typeNumber[generateRandomInt(0, typeNumber.length - 1)],
                            Year: generateRandomInt(2000, 2013),
                            EnginePower: hp[generateRandomInt(0, hp.length - 1)],
                            Cabin: cabin[generateRandomInt(0, cabin.length - 1)],
                            Picture: path.concat("Content/images/picturesForGrid/").concat(picturesPaths[generateRandomInt(0, picturesPaths.length - 1)])
                        });
                    }
                })(generateRandomInt, items);

                function SimpleItemsProviderAngular() {

                }

                SimpleItemsProviderAngular.prototype.getItems = function (firstItem, itemsNumber, sortDescriptors, filterDescriptors, collapsedFilterDescriptors, callback) {
                    var oldItems = new Array();
                    oldItems = oldItems.concat(items);
                    sort(sortDescriptors);
                    setTimeout(function () {
                        callback(onFiltering(filterDescriptors, collapsedFilterDescriptors).slice(firstItem, firstItem + itemsNumber), firstItem, itemsNumber);
                        items = new Array();
                        items = items.concat(oldItems);
                    }, 200);
                };

                SimpleItemsProviderAngular.prototype.getTotalItemsCount = function (filterDescriptors, callback) {
                    callback(onFiltering(filterDescriptors).length);
                };

                function sort(sortDescriptor) {
                    if (sortDescriptor != null && sortDescriptor.length > 0 && isNotNull(sortDescriptor[0].path)) {
                        items.sort(function (a, b) {
                            return sortingRecursive(a, b, sortDescriptor, 0);
                        });
                    }
                };

                function sortingRecursive(a, b, sortDescriptor, i) {
                    if (i != sortDescriptor.length - 1) {
                        if (getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path))
                            return sortingOrder(sortDescriptor[i]);
                        if (getMemberValue(b, sortDescriptor[i].path) > getMemberValue(a, sortDescriptor[i].path))
                            return sortingOrderDesc(sortDescriptor[i]);
                        return sortingRecursive(a, b, sortDescriptor, i + 1)
                    } else {
                        return getMemberValue(a, sortDescriptor[i].path) > getMemberValue(b, sortDescriptor[i].path) ? sortingOrder(sortDescriptor[i]) : sortingOrderDesc(sortDescriptor[i]);
                    }
                }

                function sortingOrder(sortDescriptor) {
                    return sortDescriptor.asc ? 1 : -1;
                }

                function sortingOrderDesc(sortDescriptor) {
                    return sortDescriptor.asc ? -1 : 1;
                }

                function onFiltering(filterDescriptors, collapsedFilterDescriptors) {
                    if ((filterDescriptors == null || filterDescriptors.length == 0) && (collapsedFilterDescriptors == null || collapsedFilterDescriptors.length == 0)) {
                        return items;
                    }

                    if (collapsedFilterDescriptors == undefined) {
                        collapsedFilterDescriptors = [];
                    }

                    var isCollapsedItem = [];
                    for (var c = 0; c < collapsedFilterDescriptors.length; c++) {
                        isCollapsedItem.push(false);
                    }

                    var filterdItems = [];
                    for (var j = 0; j < items.length; j++) {
                        // filtering common filters
                        var isFiltered = 0;
                        for (var i = 0; i < filterDescriptors.length; i++) {
                            if (filter(items[j], filterDescriptors[i])) {
                                isFiltered++;
                            }
                        }

                        // filtering collapsed filter
                        var isCollapsedFiltered = false;
                        var numberfilter = -1;
                        for (var i = 0; i < collapsedFilterDescriptors.length; i++) {
                            if (filter(items[j], collapsedFilterDescriptors[i])) {
                                isCollapsedFiltered = true;
                                numberfilter = i;
                                i = collapsedFilterDescriptors.length;
                            }
                        }

                        //add fake item for creating collapsing group
                        if (isFiltered == 0 && !isCollapsedFiltered) {
                            filterdItems.push(items[j]);
                        } else {
                            if (isFiltered == 0) {
                                if (isCollapsedFiltered && !isCollapsedItem[numberfilter]) {
                                    var fakeItem = {};
                                    fakeItem["isFakeItem"] = true;
                                    fakeItem[collapsedFilterDescriptors[numberfilter].path] = collapsedFilterDescriptors[numberfilter].value;
                                    for (var i = 0; i < collapsedFilterDescriptors[numberfilter].children.length; i++) {
                                        fakeItem[collapsedFilterDescriptors[numberfilter].children[i].path] = collapsedFilterDescriptors[numberfilter].children[i].value;
                                    }
                                    filterdItems.push(fakeItem);
                                    isCollapsedItem[numberfilter] = true;
                                }
                            }
                        }
                    }

                    return filterdItems;
                }

                function filter(item, filterDescriptors) {
                    if (!isFiltering(item[filterDescriptors.path], filterDescriptors.value, filterDescriptors.condition)) {
                        if (filterDescriptors.children.length == 0) {
                            return true;
                        } else {
                            var result = 0
                            for (var i = 0; i < filterDescriptors.children.length; i++) {
                                if (!isFiltering(item[filterDescriptors.children[i].path], filterDescriptors.children[i].value, filterDescriptors.children[i].condition)) {
                                    result++;
                                }
                            }
                            if (result == filterDescriptors.children.length) {
                                return true;
                            }
                        }
                    }

                    return false;
                }

                function isFiltering(item, value, condition) {
                    // on false push to filtered items
                    switch (condition) {
                        case 1://equal
                            return (item == value);
                        case 2://not equal
                            return (item != value);
                    }
                    return false;
                }

                return SimpleItemsProviderAngular;
            })();

            var TGrid = angular.module('TGrid', [])
                .controller("ctrl", function ctrl($scope) {
                    $scope.dataProvider = new SimpleItemsProviderAngular();
                })
                .directive('tGrid', TGrid.Angular.Directive);

            $(function () {
            })
        </script>
    </body>
</html>
